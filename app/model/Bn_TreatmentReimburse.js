/*
 * File: app/model/Bn_TreatmentReimburse.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ccmz.model.Bn_TreatmentReimburse', {
    extend: 'Ext.data.Model',
    alias: 'model.bn_treatmentreimburse',

    requires: [
        'Ext.data.field.String',
        'Ext.data.field.Date',
        'Ext.data.field.Number',
        'Ext.data.proxy.Ajax',
        'Ext.data.reader.Json'
    ],

    statics: {
        createNewItem: function() {
            var d = ccmz.model.Bn_TreatmentReimburse.create({
                'Operator_ID':ccmz.getApplication().curUser.UserId,
                'Operator_Name':ccmz.getApplication().curUser.CNName,
                'TreatmentHosptial_Code':ccmz.getApplication().curUser.Hospital.Code,
                'TreatmentHosptial':ccmz.getApplication().curUser.Hospital.Name,
                'TypeIn_Date':new Date(),
                'Apply_Date':new Date()
            });
            return d;
        }
    },

    convertOnSet: false,
    idProperty: 'ID',

    fields: [
        {
            type: 'string',
            name: 'ID'
        },
        {
            type: 'string',
            name: 'Apply_Hospital_ID'
        },
        {
            type: 'string',
            name: 'Reim_NO'
        },
        {
            type: 'string',
            name: 'Sfzh',
            validators: [
                {
                    type: 'length',
                    max: 18,
                    min: 18
                }
            ]
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'Medicare_State'
        },
        {
            type: 'string',
            name: 'Person_Code'
        },
        {
            type: 'int',
            defaultValue: 2,
            name: 'Reim_Source'
        },
        {
            type: 'string',
            name: 'BillNO',
            validators: [
                {
                    type: 'presence'
                }
            ]
        },
        {
            type: 'string',
            name: 'TreatmentHosptial_Code'
        },
        {
            type: 'string',
            name: 'TreatmentHosptial'
        },
        {
            type: 'string',
            name: 'Treatment_NO'
        },
        {
            type: 'int',
            defaultValue: 15,
            name: 'Reim_Type_ID'
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'In_Date'
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Out_Date'
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Medicare_Date'
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'TypeIn_Date'
        },
        {
            type: 'float',
            name: 'Medicare_Line'
        },
        {
            type: 'string',
            name: 'StdDisease_Code'
        },
        {
            type: 'string',
            name: 'StdDisease_Name'
        },
        {
            type: 'float',
            name: 'ZL_Money'
        },
        {
            type: 'float',
            name: 'ZF_Money'
        },
        {
            type: 'float',
            name: 'YLZ_Money'
        },
        {
            type: 'float',
            name: 'GR_Money'
        },
        {
            type: 'float',
            name: 'YBBX_Money'
        },
        {
            type: 'float',
            name: 'XNH_Money'
        },
        {
            type: 'string',
            name: 'Family_Code'
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Apply_Date'
        },
        {
            type: 'float',
            name: 'DBBX_Money'
        },
        {
            type: 'string',
            name: 'Card_NO'
        },
        {
            type: 'int',
            defaultValue: 0,
            name: 'Finish_Flag',
            persist: false
        },
        {
            type: 'string',
            name: 'SfLb'
        },
        {
            type: 'string',
            name: 'JGBM'
        },
        {
            type: 'int',
            name: 'PrintCount',
            persist: false
        },
        {
            type: 'string',
            name: 'Operator_ID',
            persist: false
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Create_Time',
            persist: false
        },
        {
            type: 'string',
            name: 'Pay_Operator_ID',
            persist: false
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Finish_Date',
            persist: false
        },
        {
            type: 'float',
            defaultValue: 0,
            name: 'SelfBaseMoney',
            persist: false
        },
        {
            type: 'float',
            name: 'YLJZ_Money',
            persist: false
        },
        {
            type: 'date',
            convert: function(v, rec) {
                if (Ext.isString(v))
                return new Date(parseInt(v.replace('/Date(', '')));
            },
            name: 'Cancel_Date',
            persist: false
        },
        {
            type: 'string',
            name: 'Cancel_Operator_ID',
            persist: false
        },
        {
            type: 'float',
            name: 'YBHG_Money',
            persist: false
        },
        {
            type: 'float',
            name: 'SelfBaseMoney_Total',
            persist: false
        },
        {
            type: 'float',
            name: 'YLJZ_Money_Total',
            persist: false
        },
        {
            type: 'int',
            name: 'Spec_BN'
        },
        {
            type: 'float',
            name: 'CYDBBC_Money'
        },
        {
            type: 'int',
            name: 'IdentityType_ID'
        },
        {
            type: 'float',
            name: 'SelBaseMoney_ZY_Total'
        },
        {
            type: 'float',
            name: 'GR_Accout_Pay'
        },
        {
            type: 'float',
            name: 'YB_Other_Pay'
        },
        {
            name: 'Name'
        },
        {
            name: 'Ry_Zt'
        },
        {
            name: 'Operator_Name'
        },
        {
            name: 'Pay_Operator_Name'
        },
        {
            name: 'Cancel_Operator_Name'
        },
        {
            name: 'IdentityType_Name'
        }
    ],

    proxy: {
        type: 'ajax',
        api: {
            create: '',
            read: '/YLJZ/GetTRItemById',
            update: '',
            destroy: ''
        },
        reader: {
            type: 'json',
            messageProperty: 'msg',
            rootProperty: 'data'
        }
    }
});