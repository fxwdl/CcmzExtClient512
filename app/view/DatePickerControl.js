/*
 * File: app/view/DatePickerControl.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ccmz.view.DatePickerControl', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.datepickercontrol',

    requires: [
        'Ext.form.field.Date',
        'Ext.form.Label'
    ],

    config: {
        value1: null,
        value2: null
    },

    publishes: [
        'value1',
        'value2'
    ],
    twoWayBindable: [
        'value1',
        'value2'
    ],
    fieldLabel: 'Label',
    defaultListenerScope: true,

    layout: {
        type: 'hbox',
        align: 'middle'
    },
    items: [
        {
            xtype: 'datefield',
            itemId: 'dtp1',
            width: 111,
            listeners: {
                change: 'onDtp1Change'
            }
        },
        {
            xtype: 'label',
            flex: 1,
            text: 'è‡³'
        },
        {
            xtype: 'datefield',
            itemId: 'dtp2',
            width: 111,
            listeners: {
                change: 'onDtp2Change'
            }
        }
    ],

    onDtp1Change: function(field, newValue, oldValue, eOpts) {
        if(field.isValid()){
            this.setValue1(newValue);
        }
    },

    onDtp2Change: function(field, newValue, oldValue, eOpts) {
        if(field.isValid()){
            this.setValue2(newValue);
        }
    },

    updateValue1: function(value, oldValue) {
        var me = this,
            component  = me.getComponent('dtp1'),
            valueValid = value !== undefined && value !== null && value !== '';

        if (component) {
            component.suspendEvent('change');
            component.setValue(value);
            component.resumeEvent('change');
        }

        if (me.initialized) {
            me.fireEvent('change', me, value, oldValue);
        }
    },

    updateValue2: function(value, oldValue) {
        var me = this,
            component  = me.getComponent('dtp2'),
            valueValid = value !== undefined && value !== null && value !== '';

        if (component) {
            component.suspendEvent('change');
            component.setValue(value);
            component.resumeEvent('change');
        }

        if (me.initialized) {
            me.fireEvent('change', me, value, oldValue);
        }
    }

});