/*
 * File: app/view/CompareControl.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ccmz.view.CompareControl', {
    extend: 'Ext.form.FieldContainer',
    alias: 'widget.comparecontrol',

    mixins: {
        observable: 'Ext.util.Observable'
    },
    requires: [
        'Ext.form.field.ComboBox'
    ],

    config: {
        symbol: '',
        value: null
    },

    publishes: [
        'symbol',
        'value'
    ],
    twoWayBindable: [
        'symbol',
        'value'
    ],
    fieldLabel: 'Label',
    defaultListenerScope: true,

    layout: {
        type: 'hbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'combobox',
            itemId: 'cbo',
            width: 45,
            fieldStyle: 'text-align: center;',
            editable: false,
            store: [
                '>',
                '=',
                '<'
            ],
            listeners: {
                select: 'onComboboxSelect'
            }
        },
        {
            xtype: 'textfield',
            textAlign: 'right',
            flex: 1,
            itemId: 'txt',
            inputType: 'number',
            listeners: {
                change: 'onTextfieldChange'
            }
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processCompareControl(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processCompareControl: function(config) {
        this.mixins.observable.constructor.call(this, config);
    },

    onComboboxSelect: function(combo, record, eOpts) {
        var me=this;
        this.setSymbol(record.get('field1'));
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        this.setValue(newValue);
    },

    /* 双向绑定时,修改ViewModel时会触发此方法 */
    updateSymbol: function(newValue, oldValue) {
        if(newValue!==''){
            var combo=this.down('combobox');
            combo.suspendEvent('select');
            combo.setValue(newValue);
            combo.resumeEvent('select');
        }
    },

    updateValue: function(value, oldValue) {
        var me = this,
            component  = me.getComponent('txt'),
            // allows value to be zero but not undefined or null (other falsey values)
            valueValid = value !== undefined && value !== null && value !== '';

        if (component) {
            component.suspendEvent('change');
            component.setValue(value);
            component.resumeEvent('change');
        }

        if (me.initialized) {
            me.fireEvent('change', me, value, oldValue);
        }
    }

});